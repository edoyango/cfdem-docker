#!/bin/bash
#--------------------------------------------------------------------------------#
#- define variables
logpath="$1"
logfileName="$2"
casePath="$3"
headerText="$4"
solverName="$5"
nrProcs="$6"
machineFileName="$7"
debugMode="$8"
reconstuctCase="$9"
decomposeCase=${10}
remoteStorageLocation=${11}
#--------------------------------------------------------------------------------#

if [[ $debugMode == "on" ]]; then
    debugMode="valgrind"
elif [[ $debugMode == "strict" ]]; then
    #debugMode="valgrind --leak-check=full -v --trace-children=yes --track-origins=yes" 
    debugMode="valgrind --tool=memcheck --track-origins=yes --leak-check=yes --show-reachable=yes --num-callers=20 --track-fds=yes"
elif [[ $debugMode == "strictXML" ]]; then
    #debugMode="valgrind --leak-check=full -v --trace-children=yes --track-origins=yes" 
    debugMode="valgrind --tool=memcheck --leak-check=yes --leak-check-heuristics=stdstring,length64,newarray,multipleinheritance --show-reachable=no --num-callers=20 --track-fds=yes --xml=yes --xml-file=valgrind.xml"  
elif [[ $debugMode == "profile" ]]; then
    if [[ $WM_COMPILE_OPTION == "Debug" ]]; then
        # make sure you did hpcstruct before
        debugMode="hpcrun"
        rm -r $casePath/CFD/hpctoolkit-$solverName-measurements
    else
        echo ""
        echo "WARNING - you do not use proper Debug flags! (for hpcrun you need Debug)"
        echo "using debugMode off now."
        debugMode=""
        read
    fi
elif [[ $debugMode == "callgrind" ]]; then
    if [[ $WM_COMPILE_OPTION == "Debug" ]]; then
        debugMode="valgrind --tool=callgrind"
    else
        echo ""
        echo "WARNING - you do not use proper Debug flags! Only when using debug, cachegrind will be able to look through you code."
        debugMode="valgrind --tool=callgrind"
        read
    fi

else
    debugMode=""
fi

#- clean up old log file
rm $logpath/$logfileName

#- change path
cd $casePath/CFD

#- decompose case
if [[ $decomposeCase == "false" ]]; then   
    echo "Not decomposing case."
else
    echo "Decomposing case."
    decomposePar -force

    if [[ $remoteStorageLocation == "" ]]; then
        echo "do nothing."
    else
        echo "do links"
        linkProcDirs $remoteStorageLocation
    fi
fi

#- make proc dirs visible
count=0
for i in `seq $nrProcs`
do
    let count=$i-1
    (cd $casePath/CFD/processor$count && touch file.foam)
done

#- header
echo 2>&1 | tee -a /$logpath/$logfileName
echo "//   $headerText   //" 2>&1 | tee -a $logpath/$logfileName
echo 2>&1 | tee -a $logpath/$logfileName

#- write path
pwd 2>&1 | tee -a $logpath/$logfileName
echo 2>&1 | tee -a $logpath/$logfileName

#- clean up case
rm couplingFiles/*

#- run applictaion
if [[ $machineFileName == "none" ]]; then
    mpirun -np $nrProcs $debugMode $solverName -parallel 2>&1 | tee -a $logpath/$logfileName

    #- reconstruct case
    if [[ $reconstuctCase == "true" ]]; then   
        #pseudoParallelRun "reconstructPar" $nrProcs
        reconstructPar -noLagrangian
    fi
else
    mpirun -machinefile $machineFileName -np $nrProcs $debugMode $solverName -parallel 2>&1 | tee -a $logpath/$logfileName

    #- reconstruct case
    if [[ $reconstuctCase == "true" ]]; then   
        #pseudoParallelRun "reconstructPar" $nrProcs
        reconstructPar -noLagrangian
    fi
fi

if [[ $debugMode == "hpcrun" ]]; then
    if [ -f $CFDEM_APP_DIR/$solverName.hpcstruct ]; then
        rm -r hpctoolkit-$solverName-database*
        hpcprof -S $CFDEM_APP_DIR/$solverName.hpcstruct -I ./'*' hpctoolkit-$solverName-measurements
    else
        echo "you need to run hpcstruct first for your app!"
        read
    fi   
fi

#- keep terminal open (if started in new terminal)
#read